import React, { useState } from 'react'
import {
  Box,
  Container,
  Heading,
  Text,
  Button,
  Textarea,
  Input,
  VStack,
  HStack,
  FormControl,
  FormLabel,
  Select,
  useToast,
  Modal,
  ModalOverlay,
  ModalContent,
  ModalHeader,
  ModalBody,
  ModalCloseButton,
  useDisclosure,
  Spinner,
  Alert,
  AlertIcon,
  useColorMode,
} from '@chakra-ui/react'
import { motion } from 'framer-motion'
import { useAuth } from '../contexts/AuthContext'
import { FiDownload, FiSend } from 'react-icons/fi'
import Navigation from '../components/Navigation'

const MotionBox = motion(Box)

const DocumentGenerator: React.FC = () => {
  const { user } = useAuth()
  const toast = useToast()
  const { isOpen, onOpen, onClose } = useDisclosure()
  const { colorMode } = useColorMode()

  const [formData, setFormData] = useState({
    documentType: '',
    prompt: '',
    partyName1: '',
    partyName2: '',
    amount: '',
    date: '',
  })
  const [isGenerating, setIsGenerating] = useState(false)
  const [generatedDocument, setGeneratedDocument] = useState('')

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement>) => {
    setFormData({
      ...formData,
      [e.target.name]: e.target.value,
    })
  }

  const handleGenerate = async () => {
    if (!formData.documentType || !formData.prompt) {
      toast({
        title: 'Missing Information',
        description: 'Please select a document type and provide a description.',
        status: 'warning',
        duration: 3000,
        isClosable: true,
      })
      return
    }

    setIsGenerating(true)

    // Simulate document generation (replace with actual AI API call)
    try {
      await new Promise(resolve => setTimeout(resolve, 3000))

      const mockDocument = `
LEGAL DOCUMENT - ${formData.documentType.toUpperCase()}

Generated by LawCraft AI

Date: ${new Date().toLocaleDateString()}

Parties:
${formData.partyName1 ? `Party 1: ${formData.partyName1}` : ''}
${formData.partyName2 ? `Party 2: ${formData.partyName2}` : ''}

Description:
${formData.prompt}

${formData.amount ? `Amount: $${formData.amount}` : ''}
${formData.date ? `Date: ${formData.date}` : ''}

TERMS AND CONDITIONS:

[This is a simulated document. In a real implementation, this would be generated by AI based on the user's input and selected document type.]

1. The parties agree to the terms outlined in this document.
2. This agreement shall be binding upon execution.
3. Any disputes shall be resolved through appropriate legal channels.

_____________________
Signature

_____________________
Date

---
Generated by LawCraft AI - Your Professional Legal Document Assistant
      `

      setGeneratedDocument(mockDocument)
      onOpen()

      toast({
        title: 'Document Generated Successfully',
        description: 'Your legal document has been created.',
        status: 'success',
        duration: 3000,
        isClosable: true,
      })
    } catch (error) {
      toast({
        title: 'Generation Failed',
        description: 'There was an error generating your document.',
        status: 'error',
        duration: 3000,
        isClosable: true,
      })
    } finally {
      setIsGenerating(false)
    }
  }

  const handleDownload = () => {
    const element = document.createElement('a')
    const file = new Blob([generatedDocument], { type: 'text/plain' })
    element.href = URL.createObjectURL(file)
    element.download = `${formData.documentType}-${Date.now()}.txt`
    document.body.appendChild(element)
    element.click()
    document.body.removeChild(element)
  }

  return (
    <Box
      minH="100vh"
      bg={colorMode === 'dark' ? 
        "linear-gradient(135deg, rgba(12, 12, 12, 0.95) 0%, rgba(26, 10, 46, 0.9) 50%, rgba(22, 33, 62, 0.85) 100%)" :
        "linear-gradient(135deg, rgba(248, 248, 248, 0.95) 0%, rgba(230, 220, 255, 0.9) 50%, rgba(220, 235, 255, 0.85) 100%)"
      }
      position="relative"
    >
      <Navigation currentPage="generate" />

      <Container maxW="4xl" pt="100px" pb="20px" px={{ base: 4, md: 8 }}>
        <MotionBox
          initial={{ opacity: 0, y: 20 }}
          animate={{ opacity: 1, y: 0 }}
          transition={{ duration: 0.8 }}
        >
          <VStack spacing={8} textAlign="center" mb={12}>
            <Heading
              fontSize={{ base: '2xl', sm: '3xl', md: '4xl', lg: '5xl' }}
              color={colorMode === 'dark' ? 'white' : 'gray.800'}
              fontWeight="900"
              lineHeight="shorter"
            >
              AI Document <Text as="span" color="brand.500">Generator</Text>
            </Heading>
            <Text 
              fontSize={{ base: 'md', md: 'xl' }}
              color={colorMode === 'dark' ? 'gray.400' : 'gray.600'} 
              maxW="2xl"
              px={{ base: 4, md: 0 }}
            >
              Create professional legal documents powered by AI. Simply describe what you need, and Alice will help generate it for you.
            </Text>
          </VStack>

          <Box
            bg={colorMode === 'dark' ? "rgba(255, 255, 255, 0.08)" : "rgba(255, 255, 255, 0.7)"}
            backdropFilter="blur(20px)"
            border={`1px solid ${colorMode === 'dark' ? 'rgba(255, 255, 255, 0.2)' : 'rgba(151, 15, 255, 0.2)'}`}
            borderRadius="2xl"
            p={{ base: 6, md: 8 }}
            boxShadow={colorMode === 'dark' ? 'none' : 'lg'}
          >
            <VStack spacing={6}>
              <FormControl>
                <FormLabel color={colorMode === 'dark' ? 'white' : 'gray.700'} fontSize="lg" fontWeight="bold">
                  Document Type
                </FormLabel>
                <Select
                  name="documentType"
                  value={formData.documentType}
                  onChange={handleInputChange}
                  placeholder="Select document type"
                  size="lg"
                  bg={colorMode === 'dark' ? "rgba(255, 255, 255, 0.1)" : "white"}
                  border={`1px solid ${colorMode === 'dark' ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)'}`}
                  color={colorMode === 'dark' ? 'white' : 'gray.800'}
                  _focus={{
                    borderColor: 'brand.500',
                    boxShadow: '0 0 0 1px #970fff'
                  }}
                >
                  <option value="contract" style={{ background: colorMode === 'dark' ? '#1a1a1a' : 'white', color: colorMode === 'dark' ? 'white' : 'black' }}>Contract Agreement</option>
                  <option value="nda" style={{ background: colorMode === 'dark' ? '#1a1a1a' : 'white', color: colorMode === 'dark' ? 'white' : 'black' }}>Non-Disclosure Agreement</option>
                  <option value="loan" style={{ background: colorMode === 'dark' ? '#1a1a1a' : 'white', color: colorMode === 'dark' ? 'white' : 'black' }}>Loan Agreement</option>
                  <option value="employment" style={{ background: colorMode === 'dark' ? '#1a1a1a' : 'white', color: colorMode === 'dark' ? 'white' : 'black' }}>Employment Contract</option>
                  <option value="lease" style={{ background: colorMode === 'dark' ? '#1a1a1a' : 'white', color: colorMode === 'dark' ? 'white' : 'black' }}>Lease Agreement</option>
                </Select>
              </FormControl>

              <HStack spacing={4} w="full" flexDir={{ base: 'column', md: 'row' }}>
                <FormControl>
                  <FormLabel color={colorMode === 'dark' ? 'white' : 'gray.700'}>Party 1 Name</FormLabel>
                  <Input
                    name="partyName1"
                    value={formData.partyName1}
                    onChange={handleInputChange}
                    placeholder="Enter first party name"
                    bg={colorMode === 'dark' ? "rgba(255, 255, 255, 0.1)" : "white"}
                    border={`1px solid ${colorMode === 'dark' ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)'}`}
                    color={colorMode === 'dark' ? 'white' : 'gray.800'}
                    _focus={{
                      borderColor: 'brand.500',
                      boxShadow: '0 0 0 1px #970fff'
                    }}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel color={colorMode === 'dark' ? 'white' : 'gray.700'}>Party 2 Name</FormLabel>
                  <Input
                    name="partyName2"
                    value={formData.partyName2}
                    onChange={handleInputChange}
                    placeholder="Enter second party name"
                    bg={colorMode === 'dark' ? "rgba(255, 255, 255, 0.1)" : "white"}
                    border={`1px solid ${colorMode === 'dark' ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)'}`}
                    color={colorMode === 'dark' ? 'white' : 'gray.800'}
                    _focus={{
                      borderColor: 'brand.500',
                      boxShadow: '0 0 0 1px #970fff'
                    }}
                  />
                </FormControl>
              </HStack>

              <HStack spacing={4} w="full" flexDir={{ base: 'column', md: 'row' }}>
                <FormControl>
                  <FormLabel color={colorMode === 'dark' ? 'white' : 'gray.700'}>Amount (if applicable)</FormLabel>
                  <Input
                    name="amount"
                    value={formData.amount}
                    onChange={handleInputChange}
                    placeholder="Enter amount"
                    type="number"
                    bg={colorMode === 'dark' ? "rgba(255, 255, 255, 0.1)" : "white"}
                    border={`1px solid ${colorMode === 'dark' ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)'}`}
                    color={colorMode === 'dark' ? 'white' : 'gray.800'}
                    _focus={{
                      borderColor: 'brand.500',
                      boxShadow: '0 0 0 1px #970fff'
                    }}
                  />
                </FormControl>
                <FormControl>
                  <FormLabel color={colorMode === 'dark' ? 'white' : 'gray.700'}>Date (if applicable)</FormLabel>
                  <Input
                    name="date"
                    value={formData.date}
                    onChange={handleInputChange}
                    type="date"
                    bg={colorMode === 'dark' ? "rgba(255, 255, 255, 0.1)" : "white"}
                    border={`1px solid ${colorMode === 'dark' ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)'}`}
                    color={colorMode === 'dark' ? 'white' : 'gray.800'}
                    _focus={{
                      borderColor: 'brand.500',
                      boxShadow: '0 0 0 1px #970fff'
                    }}
                  />
                </FormControl>
              </HStack>

              <FormControl>
                <FormLabel color={colorMode === 'dark' ? 'white' : 'gray.700'} fontSize="lg" fontWeight="bold">
                  Document Description
                </FormLabel>
                <Textarea
                  name="prompt"
                  value={formData.prompt}
                  onChange={handleInputChange}
                  placeholder="Describe the specific terms, conditions, and requirements for your legal document. Be as detailed as possible for the best results."
                  rows={6}
                  resize="vertical"
                  bg={colorMode === 'dark' ? "rgba(255, 255, 255, 0.1)" : "white"}
                  border={`1px solid ${colorMode === 'dark' ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.2)'}`}
                  color={colorMode === 'dark' ? 'white' : 'gray.800'}
                  _focus={{
                    borderColor: 'brand.500',
                    boxShadow: '0 0 0 1px #970fff'
                  }}
                />
              </FormControl>

              {user?.user_metadata?.tokens === 0 && (
                <Alert status="warning" borderRadius="lg">
                  <AlertIcon />
                  You have no tokens remaining. Please upgrade your plan to generate documents.
                </Alert>
              )}

              <Button
                size="lg"
                bg="linear-gradient(135deg, #970fff, #7817ff)"
                color="white"
                onClick={handleGenerate}
                isLoading={isGenerating}
                loadingText="Generating..."
                rightIcon={isGenerating ? <Spinner size="sm" /> : <FiSend />}
                isDisabled={user?.user_metadata?.tokens === 0}
                w="full"
                py={6}
                fontSize="lg"
                _hover={{
                  bg: 'linear-gradient(135deg, #7817ff, #5a0bd9)'
                }}
              >
                Generate Document with AI
              </Button>
            </VStack>
          </Box>
        </MotionBox>
      </Container>

      {/* Document Preview Modal */}
      <Modal isOpen={isOpen} onClose={onClose} size="6xl">
        <ModalOverlay backdropFilter="blur(5px)" />
        <ModalContent
          bg={colorMode === 'dark' ? "gray.800" : "white"}
          border={`1px solid ${colorMode === 'dark' ? 'rgba(255, 255, 255, 0.2)' : 'rgba(0, 0, 0, 0.1)'}`}
          maxH="80vh"
        >
          <ModalHeader color={colorMode === 'dark' ? 'white' : 'gray.800'}>
            Generated Document Preview
          </ModalHeader>
          <ModalCloseButton color={colorMode === 'dark' ? 'white' : 'gray.800'} />
          <ModalBody pb={6}>
            <VStack spacing={4}>
              <Box
                w="full"
                h="400px"
                overflowY="auto"
                p={4}
                bg={colorMode === 'dark' ? "gray.700" : "gray.50"}
                borderRadius="lg"
                border={`1px solid ${colorMode === 'dark' ? 'rgba(255, 255, 255, 0.1)' : 'rgba(0, 0, 0, 0.1)'}`}
              >
                <Text
                  color={colorMode === 'dark' ? 'white' : 'gray.800'}
                  fontSize="sm"
                  fontFamily="monospace"
                  whiteSpace="pre-wrap"
                >
                  {generatedDocument}
                </Text>
              </Box>
              <HStack spacing={4} w="full">
                <Button
                  bg="linear-gradient(135deg, #970fff, #7817ff)"
                  color="white"
                  onClick={handleDownload}
                  rightIcon={<FiDownload />}
                  flex={1}
                  _hover={{
                    bg: 'linear-gradient(135deg, #7817ff, #5a0bd9)'
                  }}
                >
                  Download Document
                </Button>
                <Button
                  variant="outline"
                  borderColor="brand.500"
                  color="brand.500"
                  onClick={onClose}
                  flex={1}
                  _hover={{
                    bg: 'brand.500',
                    color: 'white'
                  }}
                >
                  Close Preview
                </Button>
              </HStack>
            </VStack>
          </ModalBody>
        </ModalContent>
      </Modal>
    </Box>
  )
}

export default DocumentGenerator
