import React, { useState } from 'react'
import {
    Box,
    Container,
    Heading,
    Text,
    Button,
    VStack,
    HStack,
    Flex,
    Card,
    Input,
    Textarea,
    FormControl,
    FormLabel,
    Select,
    useToast,
    IconButton,
    Accordion,
    AccordionItem,
    AccordionButton,
    AccordionPanel,
    AccordionIcon,
    Badge,
    InputGroup,
    InputLeftElement,
} from '@chakra-ui/react'
import { motion } from 'framer-motion'
import { useNavigate } from 'react-router-dom'
import {
    FiHome,
    FiSearch,
    FiSend,
    FiMail,
    FiPhone,
    FiMessageCircle,
    FiHelpCircle,
    FiBook,
    FiSettings,
    FiUser,
    FiFileText,
    FiShield,
    FiClock
} from 'react-icons/fi'

const MotionBox = motion(Box)

interface FAQ {
    id: string
    question: string
    answer: string
    category: string
}

const Help: React.FC = () => {
    const navigate = useNavigate()
    const toast = useToast()
    const [searchQuery, setSearchQuery] = useState('')
    const [selectedCategory, setSelectedCategory] = useState('all')
    const [contactForm, setContactForm] = useState({
        name: '',
        email: '',
        subject: '',
        category: 'general',
        message: ''
    })

    const faqs: FAQ[] = [
        {
            id: '1',
            question: 'How do I generate my first legal document?',
            answer: 'To generate your first document, go to the Document Generator page, select a template (Contract, NDA, or Loan Agreement), fill in the required information, and click Generate. Our AI will create a professional document based on your inputs.',
            category: 'getting-started'
        },
        {
            id: '2',
            question: 'What types of legal documents can I create?',
            answer: 'Currently, we support three main document types: Business Contracts, Non-Disclosure Agreements (NDAs), and Loan Agreements. Each template is customizable and follows industry standards and legal best practices.',
            category: 'documents'
        },
        {
            id: '3',
            question: 'Are the generated documents legally binding?',
            answer: 'The documents generated by our AI are based on standard legal templates and best practices. However, we recommend having important documents reviewed by a qualified attorney before signing, as legal requirements can vary by jurisdiction.',
            category: 'legal'
        },
        {
            id: '4',
            question: 'How secure is my information?',
            answer: 'We take security seriously. All data is encrypted in transit and at rest. We use industry-standard security measures and never share your personal information with third parties. Your documents are stored securely and only accessible to you.',
            category: 'security'
        },
        {
            id: '5',
            question: 'Can I edit documents after generation?',
            answer: 'Yes! After generating a document, you can download it in various formats (PDF, Word) and make any necessary edits. You can also regenerate the document with different parameters if needed.',
            category: 'documents'
        },
        {
            id: '6',
            question: 'What payment methods do you accept?',
            answer: 'We accept all major credit cards (Visa, MasterCard, American Express), PayPal, and bank transfers for enterprise customers. All payments are processed securely through our payment partners.',
            category: 'billing'
        },
        {
            id: '7',
            question: 'How can I upgrade or downgrade my plan?',
            answer: 'You can change your plan anytime from your account settings. Upgrades take effect immediately, while downgrades take effect at the next billing cycle. You\'ll always have access to your current plan features until the end of your billing period.',
            category: 'billing'
        },
        {
            id: '8',
            question: 'Do you offer refunds?',
            answer: 'We offer a 30-day money-back guarantee for all paid plans. If you\'re not satisfied with our service, contact our support team within 30 days of purchase for a full refund.',
            category: 'billing'
        }
    ]

    const categories = [
        { value: 'all', label: 'All Categories', icon: FiBook },
        { value: 'getting-started', label: 'Getting Started', icon: FiUser },
        { value: 'documents', label: 'Documents', icon: FiFileText },
        { value: 'legal', label: 'Legal Questions', icon: FiShield },
        { value: 'security', label: 'Security', icon: FiSettings },
        { value: 'billing', label: 'Billing', icon: FiClock }
    ]

    const filteredFAQs = faqs.filter(faq => {
        const matchesCategory = selectedCategory === 'all' || faq.category === selectedCategory
        const matchesSearch = faq.question.toLowerCase().includes(searchQuery.toLowerCase()) ||
            faq.answer.toLowerCase().includes(searchQuery.toLowerCase())
        return matchesCategory && matchesSearch
    })

    const handleContactSubmit = (e: React.FormEvent) => {
        e.preventDefault()

        if (!contactForm.name || !contactForm.email || !contactForm.message) {
            toast({
                title: 'Missing Information',
                description: 'Please fill in all required fields.',
                status: 'error',
                duration: 3000,
                isClosable: true,
            })
            return
        }

        toast({
            title: 'Message Sent!',
            description: 'Thank you for contacting us. We\'ll get back to you within 24 hours.',
            status: 'success',
            duration: 5000,
            isClosable: true,
        })

        setContactForm({
            name: '',
            email: '',
            subject: '',
            category: 'general',
            message: ''
        })
    }

    return (
        <Box minH="100vh" position="relative">
            {/* Navigation */}
            <Flex
                position="fixed"
                top="0"
                left="0"
                right="0"
                h="70px"
                bg="rgba(0, 0, 0, 0.9)"
                backdropFilter="blur(20px)"
                border="1px solid rgba(255, 255, 255, 0.1)"
                align="center"
                justify="space-between"
                px={8}
                zIndex="1000"
                boxShadow="0 8px 20px rgba(0, 0, 0, 0.3)"
            >
                <Text fontSize="2xl" fontWeight="bold" color="white">
                    Law<Text as="span" color="brand.500">Craft</Text> AI
                </Text>
                <HStack spacing={4}>
                    <IconButton
                        aria-label="Home"
                        icon={<FiHome />}
                        variant="ghost"
                        color="white"
                        onClick={() => navigate('/dashboard')}
                    />
                </HStack>
            </Flex>

            <Container maxW="7xl" pt="100px" pb="20px">
                <MotionBox
                    initial={{ opacity: 0, y: 20 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ duration: 0.8 }}
                >
                    {/* Header Section */}
                    <VStack spacing={8} textAlign="center" mb={16}>
                        <Heading
                            fontSize={{ base: '3xl', md: '4xl', lg: '5xl' }}
                            color="white"
                            fontWeight="900"
                        >
                            Help & <Text as="span" color="brand.500">Support</Text>
                        </Heading>
                        <Text fontSize="xl" color="gray.400" maxW="2xl">
                            Find answers to common questions, get help with our features,
                            or contact our support team for personalized assistance.
                        </Text>
                    </VStack>

                    {/* Quick Actions */}
                    <Flex
                        direction={{ base: 'column', md: 'row' }}
                        gap={6}
                        mb={16}
                        justify="center"
                    >
                        {[
                            {
                                icon: FiMessageCircle,
                                title: 'Live Chat',
                                desc: 'Get instant help',
                                action: () => toast({ title: 'Chat feature coming soon!', status: 'info' })
                            },
                            {
                                icon: FiMail,
                                title: 'Email Support',
                                desc: 'Send us a message',
                                action: () => document.getElementById('contact-form')?.scrollIntoView({ behavior: 'smooth' })
                            },
                            {
                                icon: FiPhone,
                                title: 'Call Us',
                                desc: '+1 (555) 123-4567',
                                action: () => window.open('tel:+15551234567')
                            }
                        ].map((item, index) => {
                            const IconComponent = item.icon
                            return (
                                <MotionBox
                                    key={index}
                                    initial={{ opacity: 0, y: 20 }}
                                    animate={{ opacity: 1, y: 0 }}
                                    transition={{ duration: 0.6, delay: index * 0.1 }}
                                >
                                    <Card
                                        bg="rgba(255, 255, 255, 0.08)"
                                        backdropFilter="blur(20px)"
                                        border="1px solid rgba(255, 255, 255, 0.2)"
                                        borderRadius="xl"
                                        p={6}
                                        cursor="pointer"
                                        onClick={item.action}
                                        _hover={{
                                            transform: 'translateY(-5px)',
                                            boxShadow: '0 20px 40px rgba(151, 15, 255, 0.2)',
                                            borderColor: 'rgba(151, 15, 255, 0.4)'
                                        }}
                                        transition="all 0.3s ease"
                                    >
                                        <VStack spacing={4}>
                                            <Box
                                                bg="rgba(151, 15, 255, 0.2)"
                                                p={4}
                                                borderRadius="lg"
                                                border="1px solid rgba(151, 15, 255, 0.3)"
                                            >
                                                <IconComponent size={24} color="#970fff" />
                                            </Box>
                                            <VStack spacing={1}>
                                                <Text fontWeight="bold" color="white">{item.title}</Text>
                                                <Text fontSize="sm" color="gray.400">{item.desc}</Text>
                                            </VStack>
                                        </VStack>
                                    </Card>
                                </MotionBox>
                            )
                        })}
                    </Flex>

                    {/* FAQ Section */}
                    <Card
                        bg="rgba(255, 255, 255, 0.08)"
                        backdropFilter="blur(20px)"
                        border="1px solid rgba(255, 255, 255, 0.2)"
                        borderRadius="2xl"
                        p={8}
                        mb={16}
                    >
                        <VStack spacing={8}>
                            <Heading size="lg" color="white" textAlign="center">
                                Frequently Asked Questions
                            </Heading>

                            {/* Search and Filter */}
                            <Flex direction={{ base: 'column', md: 'row' }} gap={4} w="full">
                                <InputGroup flex="2">
                                    <InputLeftElement pointerEvents="none">
                                        <FiSearch color="gray" />
                                    </InputLeftElement>
                                    <Input
                                        placeholder="Search FAQ..."
                                        value={searchQuery}
                                        onChange={(e) => setSearchQuery(e.target.value)}
                                        bg="rgba(255, 255, 255, 0.1)"
                                        border="1px solid rgba(255, 255, 255, 0.2)"
                                        color="white"
                                        _placeholder={{ color: 'gray.400' }}
                                    />
                                </InputGroup>

                                <Select
                                    flex="1"
                                    value={selectedCategory}
                                    onChange={(e) => setSelectedCategory(e.target.value)}
                                    bg="rgba(255, 255, 255, 0.1)"
                                    border="1px solid rgba(255, 255, 255, 0.2)"
                                    color="white"
                                >
                                    {categories.map((cat) => (
                                        <option key={cat.value} value={cat.value} style={{ background: '#1a1a1a' }}>
                                            {cat.label}
                                        </option>
                                    ))}
                                </Select>
                            </Flex>

                            {/* Category Tags */}
                            <HStack spacing={3} wrap="wrap" justify="center">
                                {categories.map((cat) => {
                                    const IconComponent = cat.icon
                                    return (
                                        <Badge
                                            key={cat.value}
                                            variant={selectedCategory === cat.value ? 'solid' : 'outline'}
                                            bg={selectedCategory === cat.value ? 'linear-gradient(135deg, #970fff, #7817ff)' : 'transparent'}
                                            color={selectedCategory === cat.value ? 'white' : 'gray.400'}
                                            borderColor="rgba(151, 15, 255, 0.3)"
                                            px={3}
                                            py={1}
                                            borderRadius="full"
                                            cursor="pointer"
                                            onClick={() => setSelectedCategory(cat.value)}
                                            _hover={{
                                                bg: selectedCategory === cat.value ? 'linear-gradient(135deg, #7817ff, #5a0bd9)' : 'rgba(151, 15, 255, 0.1)'
                                            }}
                                        >
                                            <HStack spacing={1}>
                                                <IconComponent size={12} />
                                                <Text fontSize="xs">{cat.label}</Text>
                                            </HStack>
                                        </Badge>
                                    )
                                })}
                            </HStack>

                            {/* FAQ Accordion */}
                            <Accordion allowToggle w="full">
                                {filteredFAQs.map((faq) => (
                                    <AccordionItem key={faq.id} border="none" mb={4}>
                                        <AccordionButton
                                            bg="rgba(255, 255, 255, 0.05)"
                                            border="1px solid rgba(255, 255, 255, 0.1)"
                                            borderRadius="lg"
                                            _hover={{
                                                bg: 'rgba(255, 255, 255, 0.1)',
                                                borderColor: 'rgba(151, 15, 255, 0.3)'
                                            }}
                                            _expanded={{
                                                bg: 'rgba(151, 15, 255, 0.1)',
                                                borderColor: 'rgba(151, 15, 255, 0.4)'
                                            }}
                                            p={4}
                                        >
                                            <HStack flex="1" textAlign="left">
                                                <FiHelpCircle color="#970fff" />
                                                <Text color="white" fontWeight="medium">
                                                    {faq.question}
                                                </Text>
                                            </HStack>
                                            <AccordionIcon color="white" />
                                        </AccordionButton>
                                        <AccordionPanel
                                            bg="rgba(255, 255, 255, 0.03)"
                                            border="1px solid rgba(255, 255, 255, 0.1)"
                                            borderTop="none"
                                            borderBottomRadius="lg"
                                            p={4}
                                        >
                                            <Text color="gray.300" lineHeight="tall">
                                                {faq.answer}
                                            </Text>
                                        </AccordionPanel>
                                    </AccordionItem>
                                ))}
                            </Accordion>

                            {filteredFAQs.length === 0 && (
                                <VStack spacing={4} py={8}>
                                    <FiSearch size={48} color="gray" />
                                    <Text color="gray.400" textAlign="center">
                                        No FAQs found matching your search criteria.
                                        <br />
                                        Try adjusting your search terms or contact our support team.
                                    </Text>
                                </VStack>
                            )}
                        </VStack>
                    </Card>

                    {/* Contact Form */}
                    <Card
                        id="contact-form"
                        bg="rgba(255, 255, 255, 0.08)"
                        backdropFilter="blur(20px)"
                        border="1px solid rgba(255, 255, 255, 0.2)"
                        borderRadius="2xl"
                        p={8}
                    >
                        <VStack spacing={8}>
                            <Heading size="lg" color="white" textAlign="center">
                                Contact Our Support Team
                            </Heading>

                            <Text color="gray.400" textAlign="center" maxW="2xl">
                                Can't find what you're looking for? Send us a message and our support team
                                will get back to you within 24 hours.
                            </Text>

                            <Box as="form" onSubmit={handleContactSubmit} w="full" maxW="2xl">
                                <VStack spacing={6}>
                                    <Flex direction={{ base: 'column', md: 'row' }} gap={4} w="full">
                                        <FormControl isRequired>
                                            <FormLabel color="white">Name</FormLabel>
                                            <Input
                                                value={contactForm.name}
                                                onChange={(e) => setContactForm({ ...contactForm, name: e.target.value })}
                                                bg="rgba(255, 255, 255, 0.1)"
                                                border="1px solid rgba(255, 255, 255, 0.2)"
                                                color="white"
                                                _placeholder={{ color: 'gray.400' }}
                                            />
                                        </FormControl>

                                        <FormControl isRequired>
                                            <FormLabel color="white">Email</FormLabel>
                                            <Input
                                                type="email"
                                                value={contactForm.email}
                                                onChange={(e) => setContactForm({ ...contactForm, email: e.target.value })}
                                                bg="rgba(255, 255, 255, 0.1)"
                                                border="1px solid rgba(255, 255, 255, 0.2)"
                                                color="white"
                                                _placeholder={{ color: 'gray.400' }}
                                            />
                                        </FormControl>
                                    </Flex>

                                    <Flex direction={{ base: 'column', md: 'row' }} gap={4} w="full">
                                        <FormControl>
                                            <FormLabel color="white">Subject</FormLabel>
                                            <Input
                                                value={contactForm.subject}
                                                onChange={(e) => setContactForm({ ...contactForm, subject: e.target.value })}
                                                bg="rgba(255, 255, 255, 0.1)"
                                                border="1px solid rgba(255, 255, 255, 0.2)"
                                                color="white"
                                                _placeholder={{ color: 'gray.400' }}
                                            />
                                        </FormControl>

                                        <FormControl>
                                            <FormLabel color="white">Category</FormLabel>
                                            <Select
                                                value={contactForm.category}
                                                onChange={(e) => setContactForm({ ...contactForm, category: e.target.value })}
                                                bg="rgba(255, 255, 255, 0.1)"
                                                border="1px solid rgba(255, 255, 255, 0.2)"
                                                color="white"
                                            >
                                                <option value="general" style={{ background: '#1a1a1a' }}>General Inquiry</option>
                                                <option value="technical" style={{ background: '#1a1a1a' }}>Technical Support</option>
                                                <option value="billing" style={{ background: '#1a1a1a' }}>Billing Question</option>
                                                <option value="feature" style={{ background: '#1a1a1a' }}>Feature Request</option>
                                                <option value="bug" style={{ background: '#1a1a1a' }}>Bug Report</option>
                                            </Select>
                                        </FormControl>
                                    </Flex>

                                    <FormControl isRequired>
                                        <FormLabel color="white">Message</FormLabel>
                                        <Textarea
                                            value={contactForm.message}
                                            onChange={(e) => setContactForm({ ...contactForm, message: e.target.value })}
                                            bg="rgba(255, 255, 255, 0.1)"
                                            border="1px solid rgba(255, 255, 255, 0.2)"
                                            color="white"
                                            _placeholder={{ color: 'gray.400' }}
                                            rows={6}
                                            placeholder="Please describe your question or issue in detail..."
                                        />
                                    </FormControl>

                                    <Button
                                        type="submit"
                                        size="lg"
                                        bg="linear-gradient(135deg, #970fff, #7817ff)"
                                        color="white"
                                        rightIcon={<FiSend />}
                                        _hover={{
                                            bg: 'linear-gradient(135deg, #7817ff, #5a0bd9)',
                                            transform: 'translateY(-2px)'
                                        }}
                                        w={{ base: 'full', md: 'auto' }}
                                    >
                                        Send Message
                                    </Button>
                                </VStack>
                            </Box>
                        </VStack>
                    </Card>
                </MotionBox>
            </Container>
        </Box>
    )
}

export default Help
